(*
Lift of double.atrs to ticking monad; Haskell way.

double f x = f (f x);
add x 0 = x;
add x (S y) = S (add x y);
main x = double (add x);
*)

addT t1 Z = t1;
addT t1 (T t2) = T (addT t1 t2);

return a = (a, Z);
bind p fm = let p be (a, t) in bindHlp t (fm a);
bindHlp t1 p = let p be (b, t2) in (b, addT t1 t2);
tick p = let p be (a,t) in (a, T t);

succm p = let p be (x,t) in (S x, t);
addm x 0 = tick (return x);
addm x (S y) = tick (succm (addm x y));

doublem fm x = tick (bind (fm x) fm);
main x y = tick (doublem (addm x) y);
